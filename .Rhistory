fasta=read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
fasta
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome=c("test.fasta", "test1.fasta")
for (org in genome){
org="test.fasta"
fasta=read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome=c("test.fasta", "test1.fasta")
org="test.fasta"
fasta=read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome=c("test.fasta", "test1.fasta")
for (org in c("test.fasta", "test1.fasta")){
fasta=read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome=c("test.fasta", "test1.fasta")
for (org in c("test.fasta", "test1.fasta")){
fasta=read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome<-c("test.fasta", "test1.fasta")
for (org in genome){
fasta<-read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
geonme
genome
typeof(genome)
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome<-list("test.fasta", "test1.fasta")
for (org in genome){
fasta<-read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
typeof(genome)
genome
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome<-c("test.fasta", "test1.fasta")
for (org in genome){
fasta<-read.fasta(org)
getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
}
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome<-c("test.fasta", "test1.fasta")
org="test1.fasta"
read.fasta(org)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length:")
getLength(fasta)%>%median()
#names=c()
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
genome<-c("test.fasta", "test1.fasta")
for (org in genome){
read.fasta(org)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length (bp):")
getLength(fasta)%>%median()
}
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme.
#Also note: Looping is currently not working. Code is broken.
#fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
#genome<-c("test.fasta", "test1.fasta")
#for (org in genome){
#read.fasta(org)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
#print("Median scaffold length (bp):")
#getLength(fasta)%>%median()
#}
#install.packages("ape")
ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene") %>% table("seqid")
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
table(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
View(table(contig.gene.df))
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
nrows(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
numrows(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
numrow(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
nrow(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
view(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
view(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = "gene")
View(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% subset(.,type = gene)
View(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type = "gene")
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
View(contig.gene.df)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene") %>% table(.)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene") %>% table(.,seqid)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene") %>% table(.,"seqid")
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene") %>% table(.$seqid)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
table(contig.gene.df$seqid)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
View(table(contig.gene.df$seqid))
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count=View(table(contig.gene.df$seqid))
hist.count$Freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count=table(contig.gene.df$seqid)
hist.count$Freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count=table(contig.gene.df$seqid)
hist.count
hist.count$Freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count <- table(contig.gene.df$seqid)
hist.count$Freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count <- table(contig.gene.df$seqid)
hist.count
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count <- table(contig.gene.df$seqid)
hist.count[0][0]
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count <- table(contig.gene.df$seqid)
hist.count[1][1]
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
hist.count <- table(contig.gene.df$seqid)
hist.count[1]
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
table(contig.gene.df$seqid) %>% Freq(.)
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
as.data.frame(table(contig.gene.df$seqid))
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
genecount.freq <- as.data.frame(table(contig.gene.df$seqid))
genecount.freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
genecount.freq <- as.data.frame(table(contig.gene.df$seqid))
genecount.freq$Freq
#install.packages("ape")
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
genecount.freq <- as.data.frame(table(contig.gene.df$seqid))
hist(genecount.freq$Freq)
View(genecount.freq$Freq)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#find frequency of frequencies
gene.count<- as.data.frame(table(contig.gene.df$seqid))
ggplot(data = gene.count)+geom_histogram(binwidth=1,x="count genes per histogram", y = "frequency")
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#find frequency of frequencies
gene.count<- as.data.frame(table(contig.gene.df$seqid))
ggplot(data = gene.count, aes(x="count genes per histogram", y = "frequency")) + geom_histogram(binwidth=1)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#find frequency of frequencies
gene.count<- as.data.frame(table(contig.gene.df$seqid))
ggplot(data = gene.count, aes(x="count genes per histogram")) + geom_histogram(binwidth=1)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#find frequency of frequencies
gene.count<- as.data.frame(table(contig.gene.df$seqid))
ggplot(data = gene.count, aes()) + geom_histogram(binwidth=1)
View(gene.count)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#find frequency of frequencies
gene.count<- as.data.frame(table(contig.gene.df$seqid))
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram()
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept=3)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept=3, aes(color="red"))
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
View(subset(gene.count, gene.count$Freq >= 3))
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
nrow(subset(gene.count, gene.count$Freq >= 3))
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="sample.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="Amphimedon_queenslandica.Aqu1.42.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram() + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
#install.packages("ape")
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file="Amphimedon_queenslandica.Aqu1.42.gff3", GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#proportion of contigs with gene count > 3:
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme.
#Also note: Looping is currently not working. Code is broken.
fasta=read.fasta(file="~/Desktop/compgen/repo/genome_fasta/GCA_000090795.1_v1.0_genomic.fna")
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme.
#Also note: Looping is currently not working. Code is broken.
fasta=read.fasta(file="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Amphimedon_queenslandica.Aqu1.dna.toplevel.fa")
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme.
#Also note: Looping is currently not working. Code is broken.
read.fasta("/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Amphimedon_queenslandica.Aqu1.dna.toplevel.fa")%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length (bp):")
getLength(fasta)%>%median()
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. Replace $FILE with path to your file.
#Also note: Looping is currently not working. Code is broken.
fasta="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Amphimedon_queenslandica.Aqu1.dna.toplevel.fa"
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length (bp):")
getLength(fasta)%>%median()
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. Replace $FILE with path to your file.
#Also note: Looping is currently not working. Code is broken.
fasta="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Mnemiopsis_leidyi.MneLei_Aug2011.dna.toplevel.fa"
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length (bp):")
getLength(fasta)%>%median()
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. Replace $FILE with path to your file.
#Also note: Looping is currently not working. Code is broken.
fasta="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Trichoplax_adhaerens.ASM15027v1.dna.toplevel.fa"
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
print("Median scaffold length (bp):")
getLength(fasta)%>%median()
#install.packages("ape")
gff3="Amphimedon_queenslandica.Aqu1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
#median of no genes/contig
median(gene.count$Freq)
gene.count$Freq
#install.packages("ape")
gff3="Amphimedon_queenslandica.Aqu1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
#median of no genes/contig
print("Median no. genes/contig:")
median(gene.count$Freq)
print("Max no. genes/contig:")
max(gene,.count$Freq)
#median of no genes/contig
print("Median no. genes/contig:")
median(gene.count$Freq)
print("Max no. genes/contig:")
max(gene.count$Freq)
#install.packages("ape")
gff3="Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
print("Median no. genes/contig:")
median(gene.count$Freq)
print("Max no. genes/contig:")
max(gene.count$Freq)
#install.packages("ape")
gff3="Trichoplax_adhaerens.ASM15027v1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
print("Median no. genes/contig:")
median(gene.count$Freq)
print("Max no. genes/contig:")
max(gene.count$Freq)
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
print("Median no. genes/contig:", median(gene.count$Freq))
print("Max no. genes/contig: ", max(gene.count$Freq))
median <- median(gene.count$Freq)
print("Median no. genes/contig: ", median)
max <- max(gene.count$Freq)
print("Max no. genes/contig: ", max)
median <- median(gene.count$Freq)
print("Median no. genes/contig: ",median)
#install.packages("ape")
gff3="Trichoplax_adhaerens.ASM15027v1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
median <- median(gene.count$Freq)
print("Median no. genes/contig: ",median)
max <- max(gene.count$Freq)
print("Max no. genes/contig: ",max)
max
median
median <- median(gene.count$Freq)
cat("Median no. genes/contig: ",median)
max <- max(gene.count$Freq)
cat("Max no. genes/contig: ",max)
print(paste("Median no. genes/contig: ",median))
median <- median(gene.count$Freq)
print(paste("Median no. genes/contig:",median))
max <- max(gene.count$Freq)
print(paste("Max no. genes/contig:",max))
print(paste("Median no. genes/contig:",median(gene.count$Freq))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
#install.packages("ape")
gff3="Trichoplax_adhaerens.ASM15027v1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
#proportion of contigs with gene count > 3. Yikes!
nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
max <- max(gene.count$Freq)
print(paste("Max no. genes/contig:",max))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#STATS
print(paste("proportion contigs with gene count > 3:",nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#install.packages("ape")
gff3="Amphimedon_queenslandica.Aqu1.42.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#STATS
print(paste("proportion contigs with gene count > 3:",nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median())
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. Replace $FILE with path to your file.
#Also note: For some reason I'm having trouble looping this. -_-
fasta="$FILE"
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. Replace $FILE with path to your file.
#Also note: For some reason I'm having trouble looping this. -_-
fasta="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_fasta/Amphimedon_queenslandica.Aqu1.dna.toplevel.fa"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. For convenience I've included sample data.
#Ideally I would loop through all my fastas but for some reason I can't get looping to work...
fasta="sample_data/fasta_sample.fasta"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="darkgreen", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
View(ape::read.gff(file="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_annot/Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3", GFF3=TRUE))
View(ape::read.gff(file="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_annot/Trichoplax_adhaerens.ASM15027v1.42.gff3", GFF3=TRUE))
View(ape::read.gff(file="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_annot/Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3", GFF3=TRUE))
View(ape::read.gff(file="/Users/jasmineliannemah/Desktop/compgen/repo/ensembl/genome_annot/Trichoplax_adhaerens.ASM15027v1.42.gff3", GFF3=TRUE))
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. For convenience I've included sample data.
#Ideally I would loop through all my fastas but for some reason I can't get looping to work...
fasta="data/sample_data/fasta_sample.fasta"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
