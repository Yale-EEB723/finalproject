#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
#works line by line but not when looping
comparison_absent<-anti_join(analysis.table.reference,analysis.table.comparison,by="homology_id")
View(sample.table)
View(cluster.master.table)
blah<-cluster.master.table%>%mutate(case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robust"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
View(blah)
blah<-cluster.master.table%>%mutate(case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
cluster.master.table<-cluster.master.table%>%mutate(case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
write.csv(cluster.master.table,"cluster.master.table.csv",quote=FALSE,row.names=FALSE)
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
#works line by line but not when looping
comparison_absent<-anti_join(analysis.table.reference,analysis.table.comparison,by="homology_id")
View(analysis.table,reference)
View(analysis.table.reference)
#must run previous chunk first
#Take a subset! Otherwise following code will not complete running and freeze everything!!!
tmp<-master.table
filter_target=c("Homo_sapiens","Danio_rerio")
master.table<-filter(master.table, animal==filter_target)
#There are human gene names in pep files that are not anywhere in gff3 files = inner_join
#Scaffold names may not be unique but must be - join seqid and catalog id
final.master.table_cluster<-inner_join(master.table,agalma.homologs)%>%dplyr::select(.,seqid,start,end,gene,homology_id,catalog_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id,gene)
#make contingency table
contingency<-table(final.master.table_cluster$species_scaffold,final.master.table_cluster$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#dissimilarity matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag)
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
View(cluster.master.table)
clust<-cc_get_cluster(cross.clust)
#put together the scaffold:cluster dataframe
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
cluster.master.table<-final.master.table%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
cluster.master.table<-cluster.master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
write.csv(cluster.master.table,"cluster.master.table.csv",quote=FALSE,row.names=FALSE)
View(cluster.master.table)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
library(dplyr)
#clustering
library(cluster)
library(CrossClustering)
library(vegan)
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. For convenience I've included sample data.
#Ideally I would loop through all my fastas but for some reason I can't get looping to work...
fasta="data/sample_data/fasta_sample.fasta"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
#Please replace gff3_sample.gff3 with path to desired gff3 file. GFF3 files can be found in data/genomes/annot
#install.packages("ape")
gff3="data/sample_data/gff3_sample.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end coords for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#stats
print(paste("proportion contigs with gene count >= 3:",nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("./data/sample_data/fasta_sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform (JM: aka pep) id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
#wait why doesn't col.names=FALSE remove the column name?? Oh well.
write.csv(list,"Hydra_longestpep.txt",quote=FALSE,row.names=FALSE)
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Begin contstruction of MASTAAA! table.
master.table<-select(all.df,"seqid","start","end","gene")
#need to add animal ids"
master.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
write.csv(master.table,"master.table.csv",quote=FALSE,row.names=FALSE)
#Read in amalga homologs csv
agalma.homologs<-read.csv("compgen_homologs_nohydra_geneNames.csv",header=TRUE,sep=",")
#left join because need to know which genes have no homology too.
final.master.table<-left_join(master.table,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")
write.csv(final.master.table,"final.master.table_absentgenes.csv",quote=FALSE,row.names=FALSE)
#double check that there are no duplicate genes in final.master.table
#duplicated(final.master.table$gene)%>%table()
#must run previous chunk first
#Take a subset! Otherwise following code will not complete running and freeze everything!!!
tmp<-master.table
filter_target=c("Homo_sapiens","Danio_rerio")
master.table<-filter(master.table, animal==filter_target)
#There are human gene names in pep files that are not anywhere in gff3 files = inner_join
#Scaffold names may not be unique but must be - join seqid and catalog id
final.master.table_cluster<-inner_join(master.table,agalma.homologs)%>%dplyr::select(.,seqid,start,end,gene,homology_id,catalog_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id,gene)
#make contingency table
contingency<-table(final.master.table_cluster$species_scaffold,final.master.table_cluster$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#dissimilarity matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag)
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#put together the scaffold:cluster dataframe
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
cluster.master.table<-final.master.table%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
cluster.master.table<-cluster.master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
write.csv(cluster.master.table,"cluster.master.table.csv",quote=FALSE,row.names=FALSE)
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
comparison_absent<-anti_join(analysis.table.reference,analysis.table.comparison,by="homology_id")
View(comparison_absent)
View(analysis.table.reference)
View(analysis.table.comparison)
View(sample.table)
View(cluster.master.table)
View(sample.table)
ref.homolog_id.list<-unique(analysis.table.reference$homology_id)
ref.homology_id.list
ref.homolog_id.list
View(result)
ref.homolog_id.list<-unique(analysis.table.reference$homology_id)
check<-filter(sample.table, homology_id==h)%>%species_index
for (h in ref.homolog_id.list){
check<-filter(sample.table, homology_id==h)%>%species_index
}
ref.clade<-analysis.table.reference$species_index[1]
ref.clade
ref.homolog_id.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog_id.list){
check<-filter(sample.table, homology_id==h)
if( any(check$species_index<=comp.species.index)==FALSE){
print("hey")
}
}
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h)
if( any(check$species_index<=comp.species.index)==FALSE){
print("hey")
}
ref.homolog.list}
ref.homolog.list
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h && animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
print("hey")
}
}
View(check)
for (h in ref.homolog.list){
print(h)
check<-filter(sample.table, homology_id==h && animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
print("hey")
}
}
check
check<-filter(sample.table, homology_id==7570 && animal!=comparison)
check
check<-filter(sample.table, homology_id==7570 & animal!=comparison)
check
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
print("hey")
}
}
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
print(h)
}
}
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
#make sure
result
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
print(h)
}
}
ref.homolog.list
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-sample.table[homology_id!=h]
}
}
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-sample.table$homology_id!=h
}
}
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-filter(sample.table,homology_id != h)
}
}
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-filter(sample.table,homology_id ! h)
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-filter(sample.table,homology_id !== h)
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
sample.table<-filter(sample.table,homology_id != h)
}
}
sample.table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset cluster.master.table for the reference or comparison animal; remove NAs
#analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#for sample run:
sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
comp.species.index<-analysis.table.comparison$species_index[1]
for (h in ref.homolog.list){
check<-filter(sample.table, homology_id==h & animal!=comparison)
if( any(check$species_index<=comp.species.index)==FALSE){
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
#make sure
result
View(result)
View(dist.matrix)
dist.matrix
plot(dist.matrix)
as.matrix(dist.matrix)
clust
install.packages(Rtsne)
install.packages("Rtsne")
library(Rtsne)
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE)
View(tsne_obj)
College
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
#must run previous chunk first
#Take a subset! Otherwise following code will not complete running and freeze everything!!!
tmp<-master.table
filter_target=c("Homo_sapiens","Danio_rerio")
master.table<-filter(master.table, animal==filter_target)
#There are human gene names in pep files that are not anywhere in gff3 files = inner_join
#Scaffold names may not be unique but must be - join seqid and catalog id
final.master.table_cluster<-inner_join(master.table,agalma.homologs)%>%dplyr::select(.,seqid,start,end,gene,homology_id,catalog_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id,gene)
#make contingency table
contingency<-table(final.master.table_cluster$species_scaffold,final.master.table_cluster$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#dissimilarity matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#ag<-agnes(dist.matrix,diss=TRUE)
#plot(ag)
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot the clustering
#see code from http://dpmartin42.github.io/posts/r/cluster-mixed-types
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
ggplot(aes(x = X, y = Y), data = tsne_data) +
+ geom_point(aes(color = cluster))
#must run previous chunk first
#Take a subset! Otherwise following code will not complete running and freeze everything!!!
tmp<-master.table
filter_target=c("Homo_sapiens","Danio_rerio")
master.table<-filter(master.table, animal==filter_target)
#There are human gene names in pep files that are not anywhere in gff3 files = inner_join
#Scaffold names may not be unique but must be - join seqid and catalog id
final.master.table_cluster<-inner_join(master.table,agalma.homologs)%>%dplyr::select(.,seqid,start,end,gene,homology_id,catalog_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id,gene)
#make contingency table
contingency<-table(final.master.table_cluster$species_scaffold,final.master.table_cluster$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#dissimilarity matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#ag<-agnes(dist.matrix,diss=TRUE)
#plot(ag)
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot the clustering
#see code from http://dpmartin42.github.io/posts/r/cluster-mixed-types
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE)
