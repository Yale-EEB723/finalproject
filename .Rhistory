View(mrca.df)
mrca.df(mrca.df$homology_id==1005)
mrca.df[mrca.df$homology_id==1005]
mrca.df[mrca.df$homology_id==1005][]
mrca.df[[mrca.df$homology_id==1005]]
mrca.df$mrca[mrca,df$homology_id==h]
mrca.df$mrca[mrca.df$homology_id==h]
mrca<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
mrca
phy$tip.label
tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
tips<-tips[tips<=length(phy$tip.label)]
tips
View(filter(new.master.table,homology_id==h)%>%select(.,animal))
View(filter(new.master.table,homology_id==h)%>%select(.,animal))%>%unique()
View(filter(new.master.table,homology_id==h)%>%select(.,animal)%>%unique())
which(phy$tip.label==taxa)
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table,homology_id==h)%>%select(.,animal)%>%unique()
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
taxa
which(phy$tip.label==taxa)
for (t in taxa){
taxa.list<-which(phy$tip.label==t)
taxa.list
}
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
for (t in taxa){
taxa.list<-which(phy$tip.label==t)
taxa.list
}
taxa.list
t
which(phy$tip.label==t)
taxa
for (t in taxa){
taxa.list<-which(phy$tip.label==t)
taxa.list
}
taxa.list
for (t in taxa){
taxa.list<-which(phy$tip.label==t)
print(taxa.list)
}
t
taxa
for (t in taxa$animal){
taxa.list<-which(phy$tip.label==t)
print(taxa.list)
}
for (t in taxa$animal){
taxa.list<-which(phy$tip.label==t)
}
taxa.list
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa<-cbind(taxa,find.taxa)
}
taxa
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)%>%list.append(.)
}
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)%>%append()
}
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa<-append(taxa,find.taxa)
}
taxa
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
taxa.list
t
taxa$animal
find.taxa<-which(phy$tip.label==t)
find.taxa
which(phy$tip.label=="Danio_rerio")
which(phy$tip.label=="Drosophila_melanogaster")
which(phy$tip.label=="Homo_sapiens")
taxa.list<-""
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
taxa.list
taxa.list<-null
taxa.list<-NULL
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
taxa.list
setdiff(all.tips,taxa.list)
all.tips
h<-1005
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
setdiff(all.tips,taxa.list)
taxa.list<-NULL
taxa.list
h
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
setdiff(all.tips,taxa.list)
taxa
taxa.list
all.tips
#initialize
mrca.df<-data.frame()
taxa.list<-null
#initialize
mrca.df<-data.frame()
taxa.list<-NULL
#phylogeny
tree_text = "(Mnemiopsis_leidyi,(Amphimedon_queenslandica,(Trichoplax_adhaerens,(Nematostella_vectensis,((Drosophila_melanogaster,(Lottia_gigantea,(Capitella_telata,Helobdella_robusta))),(Strongylocentrotus_purpuratus,(Danio_rerio,(Homo_sapiens,Taeniopygia_guttata))))))));"
phy = read.tree(text=tree_text)
plot(phy)
#find MRCA for each homology_id
#create a list of unique homology_ids; do not include NAs
homolog.list<-unique(master.table$homology_id)
homolog.list<-homolog.list[!is.na(homolog.list)]
#loop through homology_ids and find MRCA for each
for (h in homolog.list){
homolog.animals<-master.table%>%filter(.,homology_id == h) %>% select(.,animal)%>%unique()
if (nrow(homolog.animals) == 1){
mrca<-which(phy$tip.label == homolog.animals$animal)
}
if (nrow(homolog.animals) > 1){
mrca <-getMRCA(phy,as.character(homolog.animals$animal))
}
bind.df<-cbind(homology_id=h,mrca)
mrca.df<-rbind(mrca.df,bind.df)
}
#Add MRCAs to master.table
new.master.table<-left_join(master.table,mrca.df, by="homology_id")
#For each homology_id, check whether it is not present in any child tip of the MRCA.
for (h in mrca.df$homology_id){
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
}
absent.in.taxa
absent.df<-rbind(h,absent.in.taxa)
absent.df
mrca.df<-data.frame()
absent.df<-data.frame()
taxa.list<-NULL
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
combine.df<-cbind(h,absent.in.taxa)
absent.df<-cbind(absent.df,combine.df)
combine.df
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
combine.df<-cbind(h,absent.in.taxa)
absent.df<-rbind(absent.df,combine.df)
absent.df
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
combine.df<-cbind(homology_id==h,absent.in.taxa)
mrca.df<-data.frame()
absent.df<-data.frame()
combine.df<-data.frame(homology_id=NA,absent.in,taxa=NA)
combine.df<-data.frame(homology_id=NA,absent.in.taxa=NA)
taxa.list<-NULL
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
combine.df<-cbind(h,absent.in.taxa)
absent.df<-rbind(absent.df,combine.df)
names(absent.df)<-c("homology_id","absent.in.taxa")
#initialize
mrca.df<-data.frame()
absent.df<-data.frame()
taxa.list<-NULL
#phylogeny
tree_text = "(Mnemiopsis_leidyi,(Amphimedon_queenslandica,(Trichoplax_adhaerens,(Nematostella_vectensis,((Drosophila_melanogaster,(Lottia_gigantea,(Capitella_telata,Helobdella_robusta))),(Strongylocentrotus_purpuratus,(Danio_rerio,(Homo_sapiens,Taeniopygia_guttata))))))));"
phy = read.tree(text=tree_text)
plot(phy)
#find MRCA for each homology_id
#create a list of unique homology_ids; do not include NAs
homolog.list<-unique(master.table$homology_id)
homolog.list<-homolog.list[!is.na(homolog.list)]
#loop through homology_ids and find MRCA for each
for (h in homolog.list){
homolog.animals<-master.table%>%filter(.,homology_id == h) %>% select(.,animal)%>%unique()
if (nrow(homolog.animals) == 1){
mrca<-which(phy$tip.label == homolog.animals$animal)
}
if (nrow(homolog.animals) > 1){
mrca <-getMRCA(phy,as.character(homolog.animals$animal))
}
bind.df<-cbind(homology_id=h,mrca)
mrca.df<-rbind(mrca.df,bind.df)
}
#Add MRCAs to master.table
new.master.table<-left_join(master.table,mrca.df, by="homology_id")
#For each homology_id, check whether it is not present in any child tip of the MRCA.
for (h in mrca.df$homology_id){
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
combine.df<-cbind(h,absent.in.taxa)
absent.df<-rbind(absent.df,combine.df)
}
names(absent.df)<-c("homology_id","absent.in.taxa")
nrow(absent.df)
View(absent.df)
absent.df$homology_id%>%unique()
absent.df$homology_id%>%unique()%>%count
absent.df$homology_id%>%unique()%>%count()
new.master.table<-left_join(new.master.table,absent.df)
View(new.master.table)
absent.master.table<-new.master.table%>%select(.,absent.in.taxa != NA)
absent.master.table<-new.master.table%>%select(.,!is.na(absent.in.taxa))
absent.master.table<-new.master.table%>%select(.,!is.na(new.master.table$absent.in.taxa))
names(absent.df)<-c("homology_id","absent")
new.master.table<-left_join(new.master.table,absent.df)
absent.master.table<-new.master.table%>%select(.,!is.na(absent))
absent.master.table<-new.master.table%>%select(.,!is.na(new.master.table$absent))
absent.master.table<-select(new.master.table,!is.na(new.master.table$absent))
absent.master.table<-new.master.table[!is.na(new.master.table$absent)]
absent.master.table<-new.master.table[!is.na(new.master.table$absent),]
View(absent.master.table)
#initialize
mrca.df<-data.frame()
absent.df<-data.frame()
taxa.list<-NULL
#phylogeny
tree_text = "(Mnemiopsis_leidyi,(Amphimedon_queenslandica,(Trichoplax_adhaerens,(Nematostella_vectensis,((Drosophila_melanogaster,(Lottia_gigantea,(Capitella_telata,Helobdella_robusta))),(Strongylocentrotus_purpuratus,(Danio_rerio,(Homo_sapiens,Taeniopygia_guttata))))))));"
phy = read.tree(text=tree_text)
plot(phy)
#find MRCA for each homology_id
#create a list of unique homology_ids; do not include NAs
homolog.list<-unique(master.table$homology_id)
homolog.list<-homolog.list[!is.na(homolog.list)]
#loop through homology_ids and find MRCA for each
for (h in homolog.list){
homolog.animals<-master.table%>%filter(.,homology_id == h) %>% select(.,animal)%>%unique()
if (nrow(homolog.animals) == 1){
mrca<-which(phy$tip.label == homolog.animals$animal)
}
if (nrow(homolog.animals) > 1){
mrca <-getMRCA(phy,as.character(homolog.animals$animal))
}
bind.df<-cbind(homology_id=h,mrca)
mrca.df<-rbind(mrca.df,bind.df)
}
#Add MRCAs to master.table
new.master.table<-left_join(master.table,mrca.df, by="homology_id")
#Find which taxa lack a homology ID with a MRCA encompassing those taxa.
for (h in mrca.df$homology_id){
#find all tips of the MRCA
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
#find all the taxa which possess that homology_id
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
#find which in all.tips is absent in taxa.list
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
#append to table of homology_id + absent.in.taxa
combine.df<-cbind(h,absent.in.taxa)
absent.df<-rbind(absent.df,combine.df)
}
names(absent.df)<-c("homology_id","absent")
new.master.table<-left_join(new.master.table,absent.df)
absent.master.table<-new.master.table[!is.na(new.master.table$absent),]
View(absent.master.table)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
library(dplyr)
#clustering
library(cluster)
library(CrossClustering)
library(vegan)
library(Rtsne)
#tree manipulation
library(ape)
library(hutan)
fasta_dir<-"~/Desktop/compgen/repo/ensembl/genome_fasta/"
fasta<-c("Amphimedon_queenslandica.Aqu1.dna.toplevel.fa","Capitella_teleta.Capitella_teleta_v1.0.dna.toplevel.fa","Drosophila_chr.fa", "Helobdella_robusta.Helro1.dna.toplevel.fa","Lottia_gigantea.Lotgi1.dna.toplevel.fa","Mnemiopsis_leidyi.MneLei_Aug2011.dna.toplevel.fa","Nematostella_vectensis.ASM20922v1.dna.toplevel.fa","Strongylocentrotus_purpuratus.Spur_3.1.dna.toplevel.fa","Taeniopygia_guttata.taeGut3.2.4.dna.toplevel.fa","Trichoplax_adhaerens.ASM15027v1.dna.toplevel.fa")
for (blah in fasta){
fasta_path<-paste0(fasta_dir,blah)
#histogram of call ontig lengths,
scaffold.length.plot<-read.fasta(fasta_path)%>%getLength(.)%>%as.data.frame()%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")+labs(title=blah)
scaffold.length.plot
#histogram of contig lengths, restricted to scaffolds < 10,000 bp
restricted.plot<-read.fasta(fasta_path)%>%getLength(.)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")+labs(title=blah)
restricted.plot
#stats
fasta.len=read.fasta(fasta_path)%>%getLength()
print(paste("Median scaffold/contig length (bp):",median(as.numeric(fasta.len))))
print(paste("Max scaffold/contig length (bp):",max(as.numeric(fasta.len))))
print(paste("Minimum scaffold/contig length (bp):",min(as.numeric(fasta.len))))
}
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("5taxa_results_alt.csv",header=TRUE,sep=",")
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("compgen_homologs_nohydra_geneNames.csv",header=TRUE,sep=",")
#must run previous chunk prior to running this chunk
gff3.table.save<-gff3.table
#***SUBSAMPLE: choose from which animals you want to cluster scaffolds. Not doing so makes computation impossible on a local machine.
filter_target=c("Homo_sapiens","Danio_rerio","Strongylocentrotus_purpuratus")
gff3.table<-filter(gff3.table, animal==filter_target)
#~~~Create contingency.table~~~
#Make scaffold names unique- join seqid and catalog id
contingency.table<-inner_join(gff3.table,agalma.homologs)%>%dplyr::select(.,seqid,homology_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id)
#~~~contingency.table compelte~~~
#Use contingency.table to make the contingency table
contingency<-table(contingency.table$species_scaffold,contingency.table$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#***DOWNSAMPLE contingency table for computation on a local machine.
contingency<-contingency[sample(100),sample(100)]
#distance matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#cross-cluster
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot w/ tSNE
#adjust perplexity if get error "perplexity is too large for the number of samples"
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
tsne_plot<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsne_plot
#agglomerative
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag,labels=FALSE)
#divisive
di<-diana(dist.matrix)
plot(di,labels=FALSE)
#kmeans
kmean<-kmeans(dist.matrix,51)
kclust<-kmean$cluster
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(kclust))
tsn_plot_k<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsn_plot_k
#~~~Clustering complete~~~
#~~~Create master.table.~~~
#Put together a scaffold:cluster df
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
master.table<-left_join(gff3.table.save,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset master.table for the reference or comparison animal; remove NAs
analysis.table.reference<-filter(master.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(master.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
#get species_index of comparison animal
comp.species.index<-analysis.table.comparison$species_index[1]
#for each gene in the ref analysis table
for (h in ref.homolog.list){
#select all the rows of that particular genes for all animals (except your comp animal)
#for sample data:
#check<-filter(sample.table, homology_id==h & animal!=comparison)
check<-filter(master.table, homology_id==h & animal!=comparison)
#check if any of the species indices in the check table have an index <= comparison index
if( any(check$species_index<=comp.species.index)==FALSE){
#if so, remove all rows with that gene in the analysis.table.reference
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
#initialize
mrca.df<-data.frame()
absent.df<-data.frame()
taxa.list<-NULL
#phylogeny
tree_text = "(Mnemiopsis_leidyi,(Amphimedon_queenslandica,(Trichoplax_adhaerens,(Nematostella_vectensis,((Drosophila_melanogaster,(Lottia_gigantea,(Capitella_telata,Helobdella_robusta))),(Strongylocentrotus_purpuratus,(Danio_rerio,(Homo_sapiens,Taeniopygia_guttata))))))));"
phy = read.tree(text=tree_text)
plot(phy)
#create a list of unique homology_ids; do not include NAs
homolog.list<-unique(master.table$homology_id)
homolog.list<-homolog.list[!is.na(homolog.list)]
for (h in homolog.list){
#1.Find all taxa that possess a particular homology_id.
homolog.animals<-master.table%>%filter(.,homology_id == h) %>% select(.,animal)%>%unique()
#2. Find the most recent common ancestor of all those taxa.
#If homology_id is possessed by only 1 taxon (eg. shared among paralogs), then the MRCA is the tip node.
if (nrow(homolog.animals) == 1){
mrca<-which(phy$tip.label == homolog.animals$animal)
}
if (nrow(homolog.animals) > 1){
mrca <-getMRCA(phy,as.character(homolog.animals$animal))
}
bind.df<-cbind(homology_id=h,mrca)
mrca.df<-rbind(mrca.df,bind.df)
}
#Add MRCAs to master.table
new.master.table<-left_join(master.table,mrca.df, by="homology_id")
for (h in mrca.df$homology_id){
#3. Find all the tips of the last common ancestor.
all.tips<-mrca.df$mrca[mrca.df$homology_id==h]%>%descendants(phy,.)
all.tips<-tips[tips<=length(phy$tip.label)]
taxa<-new.master.table%>%filter(homology_id==h)%>%select(.,animal)%>%unique()
#first find the node number of all animals that taxa with that homology_id
for (t in taxa$animal){
find.taxa<-which(phy$tip.label==t)
taxa.list<-append(taxa.list,find.taxa)
}
#4. Compare which tips do not possess the homology_id.
absent.in.taxa<-setdiff(all.tips,taxa.list)
taxa.list<-NULL
#append to table of homology_id + absent.in.taxa
combine.df<-cbind(h,absent.in.taxa)
absent.df<-rbind(absent.df,combine.df)
}
