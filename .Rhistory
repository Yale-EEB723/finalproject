#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("5taxa_results_alt.csv",header=TRUE,sep=",")
final.master.table<-left_join(gff3.table,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")
#must run previous chunk prior to running this chunk
#***SUBSAMPLE: choose from which animals you want to cluster scaffolds. Not doing so makes computation impossible on a local machine.
filter_target=c("Homo_sapiens","Danio_rerio","Strongylocentrotus_purpuratus")
gff3.table<-filter(gff3.table, animal==filter_target)
#~~~Create contingency.table~~~
#Make scaffold names unique- join seqid and catalog id
contingency.table<-inner_join(gff3.table,agalma.homologs)%>%dplyr::select(.,seqid,homology_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id)
#~~~contingency.table compelte~~~
#Use contingency.table to make the contingency table
contingency<-table(contingency.table$species_scaffold,contingency.table$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#***DOWNSAMPLE contingency table for computation on a local machine.
contingency<-contingency[sample(100),sample(100)]
#distance matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#cross-cluster
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot w/ tSNE
#adjust perplexity if get error "perplexity is too large for the number of samples"
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
tsne_plot<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsne_plot
#agglomerative
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag,labels=FALSE)
#divisive
di<-diana(dist.matrix)
plot(di,labels=FALSE)
#kmeans
kmean<-kmeans(dist.matrix,51)
kclust<-kmean$cluster
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(kclust))
tsn_plot_k<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsn_plot_k
#~~~Clustering complete~~~
#~~~Create master.table.~~~
#Put together a scaffold:cluster df
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
#cluster.master.table<-left_join(gff3.table,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
#cluster.master.table<-master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
#write.csv(master.table,"master.table.csv",quote=FALSE,row.names=FALSE)
cluster.master.table<-final.master.table%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
cluster.master.table<-cluster.master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~2,animal=="Trichoplax_adhaerens"~3,animal=="Nematostella_vectensis"~4,animal=="Capitella_telata"~7,animal=="Helobdella_robusta"~7,animal=="Lottia_gigantea"~6,animal=="Drosophila_melanogaster"~5,animal=="Strongylocentrotus_purpuratus"~5,animal=="Danio_rerio"~6,animal=="Taeniopygia_guttata"~7,animal=="Homo_sapiens"~7))
#~~~master.table complete~~~
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#for sample run:
#sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
#analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#subset cluster.master.table for the reference or comparison animal; remove NAs
analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
#get species_index of comparison animal
comp.species.index<-analysis.table.comparison$species_index[1]
#for each gene in the ref analysis table
for (h in ref.homolog.list){
#select all the rows of that particular genes for all animals (except your comp animal)
#for sample data:
#check<-filter(sample.table, homology_id==h & animal!=comparison)
check<-filter(cluster.master.table, homology_id==h & animal!=comparison)
#check if any of the species indices in the check table have an index <= comparison index
if( any(check$species_index<=comp.species.index)==FALSE){
#if so, remove all rows with that gene in the analysis.table.reference
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
result
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
library(dplyr)
#clustering
library(cluster)
library(CrossClustering)
library(vegan)
library(Rtsne)
fasta_dir<-"~/Desktop/compgen/repo/ensembl/genome_fasta/"
fasta<-c("Amphimedon_queenslandica.Aqu1.dna.toplevel.fa","Capitella_teleta.Capitella_teleta_v1.0.dna.toplevel.fa","Drosophila_chr.fa", "Helobdella_robusta.Helro1.dna.toplevel.fa","Lottia_gigantea.Lotgi1.dna.toplevel.fa","Mnemiopsis_leidyi.MneLei_Aug2011.dna.toplevel.fa","Nematostella_vectensis.ASM20922v1.dna.toplevel.fa","Strongylocentrotus_purpuratus.Spur_3.1.dna.toplevel.fa","Taeniopygia_guttata.taeGut3.2.4.dna.toplevel.fa","Trichoplax_adhaerens.ASM15027v1.dna.toplevel.fa")
for (blah in fasta){
fasta_path<-paste0(fasta_dir,blah)
#histogram of call ontig lengths,
scaffold.length.plot<-read.fasta(fasta_path)%>%getLength(.)%>%as.data.frame()%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")+labs(title=blah)
scaffold.length.plot
#histogram of contig lengths, restricted to scaffolds < 10,000 bp
restricted.plot<-read.fasta(fasta_path)%>%getLength(.)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")+labs(title=blah)
restricted.plot
#stats
fasta.len=read.fasta(fasta_path)%>%getLength()
print(paste("Median scaffold/contig length (bp):",median(as.numeric(fasta.len))))
print(paste("Max scaffold/contig length (bp):",max(as.numeric(fasta.len))))
print(paste("Minimum scaffold/contig length (bp):",min(as.numeric(fasta.len))))
}
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("5taxa_results_alt.csv",header=TRUE,sep=",")
#final.master.table<-left_join(gff3.table,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")
#must run previous chunk prior to running this chunk
gff3.table.save<-gff3.table
#***SUBSAMPLE: choose from which animals you want to cluster scaffolds. Not doing so makes computation impossible on a local machine.
filter_target=c("Homo_sapiens","Danio_rerio","Strongylocentrotus_purpuratus")
gff3.table<-filter(gff3.table, animal==filter_target)
#~~~Create contingency.table~~~
#Make scaffold names unique- join seqid and catalog id
contingency.table<-inner_join(gff3.table,agalma.homologs)%>%dplyr::select(.,seqid,homology_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id)
#~~~contingency.table compelte~~~
#Use contingency.table to make the contingency table
contingency<-table(contingency.table$species_scaffold,contingency.table$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#***DOWNSAMPLE contingency table for computation on a local machine.
contingency<-contingency[sample(100),sample(100)]
#distance matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#cross-cluster
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot w/ tSNE
#adjust perplexity if get error "perplexity is too large for the number of samples"
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
tsne_plot<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsne_plot
#agglomerative
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag,labels=FALSE)
#divisive
di<-diana(dist.matrix)
plot(di,labels=FALSE)
#kmeans
kmean<-kmeans(dist.matrix,51)
kclust<-kmean$cluster
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(kclust))
tsn_plot_k<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsn_plot_k
#~~~Clustering complete~~~
#~~~Create master.table.~~~
#Put together a scaffold:cluster df
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
cluster.master.table<-left_join(gff3.table.save,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
cluster.master.table<-master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
library(dplyr)
#clustering
library(cluster)
library(CrossClustering)
library(vegan)
library(Rtsne)
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("5taxa_results_alt.csv",header=TRUE,sep=",")
#final.master.table<-left_join(gff3.table,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")
#must run previous chunk prior to running this chunk
gff3.table.save<-gff3.table
#***SUBSAMPLE: choose from which animals you want to cluster scaffolds. Not doing so makes computation impossible on a local machine.
filter_target=c("Homo_sapiens","Danio_rerio","Strongylocentrotus_purpuratus")
gff3.table<-filter(gff3.table, animal==filter_target)
#~~~Create contingency.table~~~
#Make scaffold names unique- join seqid and catalog id
contingency.table<-inner_join(gff3.table,agalma.homologs)%>%dplyr::select(.,seqid,homology_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id)
#~~~contingency.table compelte~~~
#Use contingency.table to make the contingency table
contingency<-table(contingency.table$species_scaffold,contingency.table$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#***DOWNSAMPLE contingency table for computation on a local machine.
contingency<-contingency[sample(100),sample(100)]
#distance matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#cross-cluster
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot w/ tSNE
#adjust perplexity if get error "perplexity is too large for the number of samples"
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
tsne_plot<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsne_plot
#agglomerative
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag,labels=FALSE)
#divisive
di<-diana(dist.matrix)
plot(di,labels=FALSE)
#kmeans
kmean<-kmeans(dist.matrix,51)
kclust<-kmean$cluster
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(kclust))
tsn_plot_k<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsn_plot_k
#~~~Clustering complete~~~
#~~~Create master.table.~~~
#Put together a scaffold:cluster df
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
cluster.master.table<-left_join(gff3.table.save,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
cluster.master.table<-cluster.master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
#cluster.master.table<-final.master.table%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
#cluster.master.table<-cluster.master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~2,animal=="Trichoplax_adhaerens"~3,animal=="Nematostella_vectensis"~4,animal=="Capitella_telata"~7,animal=="Helobdella_robusta"~7,animal=="Lottia_gigantea"~6,animal=="Drosophila_melanogaster"~5,animal=="Strongylocentrotus_purpuratus"~5,animal=="Danio_rerio"~6,animal=="Taeniopygia_guttata"~7,animal=="Homo_sapiens"~7))
#~~~master.table complete~~~
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#for sample run:
#sample.table<-read.table("sample.table.txt",header=TRUE,sep=",")
#analysis.table.reference<-filter(sample.table,animal==reference & !is.na(homology_id))
#analysis.table.comparison<-filter(sample.table,animal==comparison & !is.na(homology_id))
#subset cluster.master.table for the reference or comparison animal; remove NAs
analysis.table.reference<-filter(cluster.master.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(cluster.master.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
#get species_index of comparison animal
comp.species.index<-analysis.table.comparison$species_index[1]
#for each gene in the ref analysis table
for (h in ref.homolog.list){
#select all the rows of that particular genes for all animals (except your comp animal)
#for sample data:
#check<-filter(sample.table, homology_id==h & animal!=comparison)
check<-filter(cluster.master.table, homology_id==h & animal!=comparison)
#check if any of the species indices in the check table have an index <= comparison index
if( any(check$species_index<=comp.species.index)==FALSE){
#if so, remove all rows with that gene in the analysis.table.reference
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
result
View(result)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
library(dplyr)
#clustering
library(cluster)
library(CrossClustering)
library(vegan)
library(Rtsne)
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#~~~Create GFF3 Table~~~
#set up empty df to rbind to
all.df<-data.frame(matrix(ncol=5,nrow=0))
names<-c("seqid","type","start","end","attributes")
colnames(all.df)<-names
#set up file names to loop through
gff3_dir="data/genomes/gff3/"
gff3=c("Amphimedon_queenslandica.Aqu1.42.gff3","Capitella_teleta.Capitella_teleta_v1.0.42.gff3","Danio_rerio.GRCz11.95.gff3","Drosophila_melanogaster.BDGP6.95.gff3","Helobdella_robusta.Helro1.42.gff3","Homo_sapiens.GRCh38.95.gff3","Lottia_gigantea.Lotgi1.42.gff3","Mnemiopsis_leidyi.MneLei_Aug2011.42.gff3","Nematostella_vectensis.ASM20922v1.42.gff3","Strongylocentrotus_purpuratus.Spur_3.1.42.gff3","Taeniopygia_guttata.taeGut3.2.4.95.gff3","Trichoplax_adhaerens.ASM15027v1.42.gff3")
#read in each gff3 file and extract seqid, type, start, end, attributes. Filter lines by type = gene.
for (blah in gff3)
{
gff3_path<-paste0(gff3_dir,blah)
contig.gene.df <- ape::read.gff(file=gff3_path, GFF3=TRUE) %>% dplyr::select(.,"seqid","type","start","end","attributes") %>% filter(.,type == "gene")
all.df<-bind_rows(all.df,contig.gene.df)
}
#Parse out the gene_id from the attributes
all.df$gene<-gsub(".*gene_id=(.*?);.*","\\1",all.df$attributes)
#Construct gff3 table
gff3.table<-select(all.df,"seqid","start","end","gene")
#add animal IDs to gff3 table
gff3.table$animal<-c(rep.int("Amphimedon_queenslandica",43615),rep.int("Capitella_telata",32175),rep.int("Danio_rerio",25606),rep.int("Drosophila_melanogaster",13931),rep.int("Helobdella_robusta",23432),rep.int("Homo_sapiens",21492),rep.int("Lottia_gigantea",23349),rep.int("Mnemiopsis_leidyi",16559),rep.int("Nematostella_vectensis",24773),rep.int("Strongylocentrotus_purpuratus",28987),rep.int("Taeniopygia_guttata",17488),rep.int("Trichoplax_adhaerens",11520))
#~~~ GFF3 Table Finished ~~~
#Read in agalma homologs csv
agalma.homologs<-read.csv("5taxa_results_alt.csv",header=TRUE,sep=",")
#must run previous chunk prior to running this chunk
gff3.table.save<-gff3.table
#***SUBSAMPLE: choose from which animals you want to cluster scaffolds. Not doing so makes computation impossible on a local machine.
filter_target=c("Homo_sapiens","Danio_rerio","Strongylocentrotus_purpuratus")
gff3.table<-filter(gff3.table, animal==filter_target)
#~~~Create contingency.table~~~
#Make scaffold names unique- join seqid and catalog id
contingency.table<-inner_join(gff3.table,agalma.homologs)%>%dplyr::select(.,seqid,homology_id,animal)%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%dplyr::select(.,species_scaffold,homology_id)
#~~~contingency.table compelte~~~
#Use contingency.table to make the contingency table
contingency<-table(contingency.table$species_scaffold,contingency.table$homology_id)%>%as.matrix()
contingency<-1*(contingency>0)
#***DOWNSAMPLE contingency table for computation on a local machine.
contingency<-contingency[sample(100),sample(100)]
#distance matrix
dist.matrix<-daisy(contingency,metric="gower",stand=FALSE)
#cluster
#cross-cluster
cross.clust<-cc_crossclustering(dist.matrix,out=FALSE)
clust<-cc_get_cluster(cross.clust)
#plot w/ tSNE
#adjust perplexity if get error "perplexity is too large for the number of samples"
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(clust))
tsne_plot<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsne_plot
#agglomerative
ag<-agnes(dist.matrix,diss=TRUE)
plot(ag,labels=FALSE)
#divisive
di<-diana(dist.matrix)
plot(di,labels=FALSE)
#kmeans
kmean<-kmeans(dist.matrix,51)
kclust<-kmean$cluster
tsne_obj<-Rtsne(dist.matrix,is_distance=TRUE,perplexity=1)
tsne_data<-tsne_obj$Y%>%data.frame()%>%setNames(c("X","Y"))%>%mutate(cluster=factor(kclust))
tsn_plot_k<-ggplot(aes(x = X, y = Y), data = tsne_data) + geom_point(aes(color = cluster))
tsn_plot_k
#~~~Clustering complete~~~
#~~~Create master.table.~~~
#Put together a scaffold:cluster df
clust.df<-as.data.frame(clust)
colnames(clust.df)<-"cluster_id"
clust.df<-mutate(clust.df,species_scaffold=row.names(contingency))
master.table<-left_join(gff3.table.save,agalma.homologs)%>%select(.,"seqid","start","end","gene","homology_id","catalog_id","animal")%>%mutate(species_scaffold=str_c(seqid,animal,sep="_"))%>%left_join(.,clust.df,by="species_scaffold")%>%select(.,species_scaffold,start,end,gene,homology_id,animal,cluster_id)
#Add an index to each species
master.table<-master.table%>%mutate(species_index=case_when(animal=="Amphimedon_queenslandica"~1,animal=="Mnemiopsis_leidyi"~1,animal=="Trichoplax_adhaerens"~2,animal=="Nematostella_vectensis"~3,animal=="Capitella_telata"~4,animal=="Helobdella_robusta"~4,animal=="Lottia_gigantea"~4,animal=="Drosophila_melanogaster"~4,animal=="Strongylocentrotus_purpuratus"~4,animal=="Danio_rerio"~4,animal=="Taeniopygia_guttata"~5,animal=="Homo_sapiens"~6))
reference="Homo_sapiens"
comparison="Danio_rerio"
result<-data.frame()
#subset master.table for the reference or comparison animal; remove NAs
analysis.table.reference<-filter(master.table,animal==reference & !is.na(homology_id))
analysis.table.comparison<-filter(master.table,animal==comparison & !is.na(homology_id))
#remove any genes in the analysis.table.reference that are present only in clades that arose after the comparison clade.
#get a list of all unique homology_ids in the analysis table
ref.homolog.list<-unique(analysis.table.reference$homology_id)
#get species_index of comparison animal
comp.species.index<-analysis.table.comparison$species_index[1]
#for each gene in the ref analysis table
for (h in ref.homolog.list){
#select all the rows of that particular genes for all animals (except your comp animal)
#for sample data:
#check<-filter(sample.table, homology_id==h & animal!=comparison)
check<-filter(master.table, homology_id==h & animal!=comparison)
#check if any of the species indices in the check table have an index <= comparison index
if( any(check$species_index<=comp.species.index)==FALSE){
#if so, remove all rows with that gene in the analysis.table.reference
analysis.table.reference<-filter(analysis.table.reference,homology_id != h)
}
}
#list of unique scaffold ids in reference
ref.scaffold.list<-unique(analysis.table.reference$species_scaffold)
#for each unique scaffold in the reference table:
for (r in ref.scaffold.list){
#find cluster id for each scaffold
reference.table.scaffold<-analysis.table.reference%>%filter(.,species_scaffold==r)
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
#find all unique scaffolds in comparison table with that cluster_id
comp.scaffold<-analysis.table.comparison%>%filter(.,cluster_id==ref.cluster_id)
comp.scaffold<-unique(comp.scaffold$species_scaffold)
#for each unique scaffold in comparison table w/ cluster_id
for (c in comp.scaffold){
#isolate genes from that scaffold and compare to original ref scaffold
comp.table.scaffold<-analysis.table.comparison%>%filter(.,species_scaffold==c)
comparison_absent<-anti_join(reference.table.scaffold,comp.table.scaffold,by="homology_id")
comparison_absent<-mutate(comparison_absent,comp_scaff=c)
result<-rbind(result,comparison_absent)
}
}
result
reference.cluster.id
ref.cluster_id
ref.cluster_id<-unique(reference.table.scaffold$cluster_id)
ref.cluster_id
result
View(reslut)
View(result)
