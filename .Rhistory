#~~~~~ End of 'story''s code.~~~~~
gene.iso.df<-rownames_to_column(gene.iso.df)
longest_pep<-gene.iso.df%>%group_by(geneID) %>%(the_rank = rank(width,ties.method="random")) %>%filter(the_rank==1)%>%select(the_rank)
df %>% group_by(A) %>%
mutate(the_rank  = rank(-value, ties.method = "random")) %>%
filter(the_rank == 1) %>% select(-the_rank)
gene.iso.df%>%group_by(geneID)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#The following code is by usr "story" (Bioinformatics Stackexchange), Jan'9'17 unless otherwise indicated
#library(Biostrings)
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
## split data.frame into list with entry for each gene
#gene.iso.df.split <- split(gene.iso.df,gene.iso.df$geneID)
## optional to keep all the information but really you just need indices
#gene.iso.df.split.best <- lapply(gene.iso.df.split,function(x) x[order(x$width)[1],])
## pull out the longest isoform ID for each gene (in case of a tie just take the first one)
#best.id <- sapply(gene.iso.df.split,function(x) row.names(x)[order(x$width)[1]])
## subset your original reads with the subset
##fasta.s.best <- fasta.s[best.id]
## export new fastafile containing longest isoform per gene
##writeXStringSet(fasta.s, filepath='sample_best_isoform.fasta')
#~~~~~ End of 'story''s code.~~~~~
gene.iso.df<-rownames_to_column(gene.iso.df)
longest_pep<-gene.iso.df%>%group_by(geneID) %>% the_rank = rank(width,ties.method="random") %>%filter(the_rank==1)%>%select(the_rank)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#The following code is by usr "story" (Bioinformatics Stackexchange), Jan'9'17 unless otherwise indicated
#library(Biostrings)
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
## split data.frame into list with entry for each gene
#gene.iso.df.split <- split(gene.iso.df,gene.iso.df$geneID)
## optional to keep all the information but really you just need indices
#gene.iso.df.split.best <- lapply(gene.iso.df.split,function(x) x[order(x$width)[1],])
## pull out the longest isoform ID for each gene (in case of a tie just take the first one)
#best.id <- sapply(gene.iso.df.split,function(x) row.names(x)[order(x$width)[1]])
## subset your original reads with the subset
##fasta.s.best <- fasta.s[best.id]
## export new fastafile containing longest isoform per gene
##writeXStringSet(fasta.s, filepath='sample_best_isoform.fasta')
#~~~~~ End of 'story''s code.~~~~~
gene.iso.df<-rownames_to_column(gene.iso.df)
gene.iso.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#The following code is by usr "story" (Bioinformatics Stackexchange), Jan'9'17 unless otherwise indicated
#library(Biostrings)
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
## split data.frame into list with entry for each gene
#gene.iso.df.split <- split(gene.iso.df,gene.iso.df$geneID)
## optional to keep all the information but really you just need indices
#gene.iso.df.split.best <- lapply(gene.iso.df.split,function(x) x[order(x$width)[1],])
## pull out the longest isoform ID for each gene (in case of a tie just take the first one)
#best.id <- sapply(gene.iso.df.split,function(x) row.names(x)[order(x$width)[1]])
## subset your original reads with the subset
##fasta.s.best <- fasta.s[best.id]
## export new fastafile containing longest isoform per gene
##writeXStringSet(fasta.s, filepath='sample_best_isoform.fasta')
#~~~~~ End of 'story''s code.~~~~~
gene.iso.df<-rownames_to_column(gene.iso.df)
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
View(longest.pep.df)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. For convenience I've included sample data.
#Ideally I would loop through all my fastas but for some reason I can't get looping to work...
fasta="data/sample_data/fasta_sample.fasta"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
#Please replace gff3_sample.gff3 with path to desired gff3 file. GFF3 files can be found in data/genomes/annot
#install.packages("ape")
gff3="data/sample_data/gff3_sample.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end coords for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#stats
print(paste("proportion contigs with gene count >= 3:",nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
View(longest.pep.df)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df%>%select(., rowname)
list
list<-longest.pep.df%>%select(.,rowname)
list
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df%>%select(.,longest.pep.df$rowname)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
list
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
list
View(list)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
list
View(list)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
write.csv(list,"list.txt")
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE,col.names=FALSE)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE,col.names = FALSE)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE,col.names = FALSE)
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
#wait why doesn't col.names=FALSE remove the column name?? Oh well.
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE)
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
echo=FALSE,
dpi=300,
cache=TRUE
)
library( tidyverse )
library(ggplot2)
library(seqinr)
library(ape)
library(Biostrings)
#NOTE: due to lfs not working for public forks I am unable to host genome fastas in repo. Links to data provided in readme. For convenience I've included sample data.
#Ideally I would loop through all my fastas but for some reason I can't get looping to work...
fasta="data/sample_data/fasta_sample.fasta"
#histogram of contig lengths
read.fasta(fasta)%>%getLength(fasta)%>%as.data.frame()%>%filter(.<10000)%>%ggplot()+geom_histogram(aes(x=.), fill="skyblue3", color="black",binwidth=100)+xlab("Scaffold Length")
#stats
print(paste("Median scaffold/contig length (bp):",getLength(fasta)%>%median()))
#Please replace gff3_sample.gff3 with path to desired gff3 file. GFF3 files can be found in data/genomes/annot
#install.packages("ape")
gff3="data/sample_data/gff3_sample.gff3"
#parse gff3 and create new df with only seqid, type, start and end. Keep start and end coords for later analyses.
contig.gene.df <- ape::read.gff(file=gff3, GFF3=TRUE) %>% select(.,"seqid","type","start","end") %>% filter(.,type == "gene")
#for histogram, take just the contig names and gene counts
gene.count<- as.data.frame(table(contig.gene.df$seqid))
#plot frequency of frequencies
ggplot(data = gene.count, aes(x=gene.count$Freq)) + geom_histogram(binwidth=1) + geom_vline(xintercept = 3)
#stats
print(paste("proportion contigs with gene count >= 3:",nrow(subset(gene.count, gene.count$Freq >= 3))/nrow(gene.count)*100))
print(paste("Median no. genes/contig:",median(gene.count$Freq)))
print(paste("Max no. genes/contig:",max(gene.count$Freq)))
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("longest_pep_sample.fasta")
#install bioconductor 3.8 https://www.bioconductor.org/install/
#install Biostrings: BiocManager::install("Biostrings", version = "3.8") ; do not update mclust because it will have a warning and then biostrings module not installed.
#~~~~~ Beginning of 'story''s code.~~~~~
## read your fasta in as Biostrings object
fasta.s <- readDNAStringSet("longest_pep_sample.fasta")
## get the read names (in your case it has the isoform info)
names.fasta <- names(fasta.s)
## extract only the relevant gene and isoform id (split name by the period symbol)
#JM: modify line to fit my name format
gene.iso <- sapply(names.fasta,function(j) cbind(unlist(strsplit(j,'\\:'))[1:8]))
## convert to good data.frame = transpose result from previous step and add relevant column names
gene.iso.df <- data.frame(t(gene.iso))
#JM: alter to put your own column names in:
colnames(gene.iso.df) <- c('p','pepID','s','scaffID','g','geneID','t','transID')
gene.iso.df<-select(gene.iso.df, geneID, pepID)
## and length of isoforms
gene.iso.df$width <- width(fasta.s)
#Did not use rest of code.
#~~~~~ End of 'story''s code.~~~~~
#JM:
gene.iso.df<-rownames_to_column(gene.iso.df)
#~~~~~beginning of code by nassimhddd (Jul 18 '16) Stackoverflow~~~~~
longest.pep.df <-gene.iso.df%>%group_by(geneID)%>%mutate(the_rank = rank(-width,ties.method="random")) %>%filter(the_rank==1)%>%select(-the_rank)
#~~~~~End of nassimhddd's code.~~~~~
list<-longest.pep.df[,1,drop=FALSE]
#wait why doesn't col.names=FALSE remove the column name?? Oh well.
write.csv(list,"list.txt",quote=FALSE,row.names=FALSE)
